from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    pass  # python-dotenv –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

# –û—Ç—Ä–∏–º—É—î–º–æ DATABASE_URL –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
DATABASE_URL = os.getenv("DATABASE_URL")

# –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment variables, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
if not DATABASE_URL or DATABASE_URL == "":
    # –í–ê–ñ–õ–ò–í–û: –ó–∞–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å PostgreSQL
    DATABASE_URL = "postgresql://postgres:Ur3agd026323!@localhost:5432/travel_planner"
    print("‚ö† WARNING: Using hardcoded DATABASE_URL")
    print("  Consider setting DATABASE_URL environment variable for security")

# –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
try:
    # –ü–∞—Ä—Å–∏–º–æ URL –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É
    from urllib.parse import urlparse

    parsed = urlparse(DATABASE_URL)
    safe_url = f"{parsed.scheme}://{parsed.username}:***@{parsed.hostname}:{parsed.port}{parsed.path}"
    print(f"üìä Database: {safe_url}")
except:
    print(f"üìä Database configured")

# –°—Ç–≤–æ—Ä—é—î–º–æ engine –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
engine = create_engine(
    DATABASE_URL,
    echo=False,  # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å True –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ SQL –ª–æ–≥—É–≤–∞–Ω–Ω—è
    pool_pre_ping=True,  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
    pool_size=5,
    max_overflow=10
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –°—Ç–≤–æ—Ä—é—î–º–æ Base —Ç—É—Ç, —â–æ–± –≤—ñ–Ω –±—É–≤ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


def get_db():
    """Dependency –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å"""
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—ñ —Ç—É—Ç, —â–æ–± Base –∑–Ω–∞–≤ –ø—Ä–æ –Ω–∏—Ö
    from app import models

    print("Initializing database...")
    Base.metadata.create_all(bind=engine)
    print("Database initialized successfully!")


def check_db_connection():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        from sqlalchemy import text
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        print("‚úì Database connection test: SUCCESS")
        return True
    except Exception as e:
        print(f"‚úó Database connection test: FAILED")
        print(f"  Error: {e}")
        return False