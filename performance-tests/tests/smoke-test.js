/**
 * ============================================================================
 * SMOKE TEST
 * ============================================================================
 * 
 * –ú–ï–¢–ê:
 * –®–≤–∏–¥–∫–∞ –±–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ API –ø—Ä–∞—Ü—é—î —ñ –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ.
 * –¶–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Å—Ç —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–¥ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–º –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–∏–º
 * —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ —Å–∏—Å—Ç–µ–º–∞ –≤–∑–∞–≥–∞–ª—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î.
 * 
 * –•–Ü–î –í–ò–ö–û–ù–ê–ù–ù–Ø –¢–ï–°–¢–£:
 * 1. Warm-up —Ñ–∞–∑–∞ (30 —Å–µ–∫—É–Ω–¥): –ü–æ—Å—Ç—É–ø–æ–≤–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –¥–æ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * 2. Steady state (1 —Ö–≤–∏–ª–∏–Ω–∞): –°—Ç–∞–±—ñ–ª—å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * 3. Cool-down —Ñ–∞–∑–∞ (30 —Å–µ–∫—É–Ω–¥): –ó–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
 * 
 * –ö–û–ñ–ù–ê –Ü–¢–ï–†–ê–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–Ø–Ñ:
 * - Health check endpoint
 * - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è travel plan
 * - –ß–∏—Ç–∞–Ω–Ω—è travel plan
 * - –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
 * - –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É
 * - –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É
 * 
 * –ö–†–ò–¢–ï–†–Ü–á –£–°–ü–Ü–•–£:
 * - –í—Å—ñ endpoints –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤ –º–µ–∂–∞—Ö —Ç–∞–π–º-–∞—É—Ç—É
 * - –ñ–æ–¥–Ω–∏—Ö critical errors
 * - >100% –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç—å —É—Å–ø—ñ—à–Ω–æ
 * 
 * –Ø–ö–©–û SMOKE TEST –ù–ï –ü–†–û–•–û–î–ò–¢–¨:
 * - –ù–ï –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–æ–≤–Ω—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏
 * - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ API –∑–∞–ø—É—â–µ–Ω–∏–π
 * - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é (BASE_URL)
 * - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
 * 
 * ============================================================================
 */

import { sleep } from 'k6';
import { SMOKE_THRESHOLDS } from '../config/endpoints.js';
import {
  checkHealth,
  createTravelPlan,
  getTravelPlan,
  addLocation,
  updateTravelPlan,
  deleteTravelPlan,
  listTravelPlans,
  verifyPlanDeleted,
  thinkTime,
} from '../utils/api-client.js';
import {
  generateTravelPlan,
  generateLocation,
} from '../utils/data-generator.js';

// ============================================================================
// –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¢–ï–°–¢–£
// ============================================================================

export const options = {
  // –î—É–∂–µ –ø–æ–º—ñ—Ä–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è - –ª–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
  stages: [
    { duration: '5s', target: 2 },   // Warm-up
    { duration: '10s', target: 5 },    // Stable load
    { duration: '5s', target: 0 },   // Cool-down
  ],

  // –ú'—è–∫—ñ –ø–æ—Ä–æ–≥–∏ - –≥–æ–ª–æ–≤–Ω–µ —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ
  thresholds: {
    ...SMOKE_THRESHOLDS,
    
    // –í—Å–µ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ä–æ–∑—É–º–Ω–æ —à–≤–∏–¥–∫–æ
    'http_req_duration': ['p(95)<2000'],
    
    // –°—Ç—Ä–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å—É: –∂–æ–¥–Ω–∏—Ö —Ñ–µ–π–ª—ñ–≤
    'http_req_failed{type:write}': ['rate==0'],
    // –î–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—è—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É —á–∞—Å—Ç–∫—É —á–µ—Ä–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π 404 –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    'http_req_failed{type:read}': ['rate<0.12'],
    // –í–ª–∞—Å–Ω—ñ –ø–æ–º–∏–ª–∫–∏ API –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è
    'api_errors': ['rate==0'],
    
    // –ë—ñ–ª—å—à—ñ—Å—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –º–∞—é—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏
    'checks': ['rate>0.90'],
  },

  userAgent: 'K6-SmokeTest/1.0',
};

// ============================================================================
// –û–°–ù–û–í–ù–ò–ô –°–¶–ï–ù–ê–†–Ü–ô –¢–ï–°–¢–£
// ============================================================================

export default function () {
  // --------------------------------------------------
  // 1. HEALTH CHECK
  // --------------------------------------------------
  const isHealthy = checkHealth();
  
  if (!isHealthy) {
    console.error('‚ùå API health check failed!');
    return; // –ù–µ–º–∞—î —Å–µ–Ω—Å—É –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —è–∫—â–æ API –Ω–µ –∑–¥–æ—Ä–æ–≤–∏–π
  }

  thinkTime(0.5, 1);

  // --------------------------------------------------
  // 2. –°–ü–ò–°–û–ö –ü–õ–ê–ù–Ü–í (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º)
  // --------------------------------------------------
  const plans = listTravelPlans();
  
  thinkTime(0.5, 1);

  // --------------------------------------------------
  // 3. –°–¢–í–û–†–ï–ù–ù–Ø TRAVEL PLAN
  // --------------------------------------------------
  const planData = generateTravelPlan();
  planData.title = 'Smoke Test Plan';
  
  console.debug(`üìù Creating travel plan with data: ${JSON.stringify(planData)}`);
  const plan = createTravelPlan(planData);
  
  if (!plan) {
    console.error('‚ùå Failed to create travel plan');
    console.error('   This could indicate:');
    console.error('   - API returned non-201 status');
    console.error('   - Response body is not valid JSON');
    console.error('   - Plan data validation failed');
    return;
  }

  const planId = plan.id;
  console.debug(`‚úì Created plan: ${planId}`);

  thinkTime(1, 1.5);

  // --------------------------------------------------
  // 4. –ß–ò–¢–ê–ù–ù–Ø TRAVEL PLAN
  // --------------------------------------------------
  const retrievedPlan = getTravelPlan(planId);
  
  if (!retrievedPlan) {
    console.error(`‚ùå Failed to retrieve travel plan: ${planId}`);
    console.error('   This could indicate:');
    console.error('   - API returned non-200 status');
    console.error('   - Response body is not valid JSON');
    console.error('   - Plan was not found (404)');
    deleteTravelPlan(planId);
    return;
  }

  console.debug(`‚úì Retrieved plan: ${planId}`);
  console.debug(`   Plan details: title="${retrievedPlan.title}", version=${retrievedPlan.version}, locations=${retrievedPlan.locations?.length || 0}`);

  thinkTime(1, 1.5);

  // --------------------------------------------------
  // 5. –î–û–î–ê–í–ê–ù–ù–Ø –õ–û–ö–ê–¶–Ü–á
  // --------------------------------------------------
  const locationData = generateLocation();
  locationData.name = 'Smoke Test Location';
  
  console.debug(`üìç Adding location to plan ${planId} with data: ${JSON.stringify(locationData)}`);
  const location = addLocation(planId, locationData, retrievedPlan.version);
  
  if (!location) {
    console.error(`‚ùå Failed to add location to plan ${planId}`);
    console.error('   This could indicate:');
    console.error('   - API returned non-201 status');
    console.error('   - Response body is not valid JSON');
    console.error('   - Location data validation failed');
    console.error('   - Plan not found (404)');
    deleteTravelPlan(planId);
    return;
  }

  console.debug(`‚úì Added location: ${location.id}`);

  thinkTime(1, 1.5);

  // --------------------------------------------------
  // 6. –û–ù–û–í–õ–ï–ù–ù–Ø TRAVEL PLAN
  // --------------------------------------------------
  console.debug(`üîÑ Re-fetching plan ${planId} to get the latest version...`);
  const planAfterLocationAdd = getTravelPlan(planId);
  
  if (!planAfterLocationAdd) {
      console.error(`‚ùå Failed to re-fetch plan ${planId} before update`);
      deleteTravelPlan(planId); // Cleanup
      return;
  }
  console.debug(`‚úì Got updated version: ${planAfterLocationAdd.version}`);
  
  
  const updateData = {
      ...planData,
      title: 'Updated Smoke Test Plan',
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—É –≤–µ—Ä—Å—ñ—é
      version: planAfterLocationAdd.version, 
  };
  
  const updated = updateTravelPlan(planId, updateData);
  
  if (!updated || updated.conflict) {
      console.error('‚ùå Failed to update travel plan');
      deleteTravelPlan(planId);
      return;
  }
  
  console.debug(`‚úì Updated plan: ${planId}`);

  thinkTime(1, 1.5);

  // --------------------------------------------------
  // 7. –í–ò–î–ê–õ–ï–ù–ù–Ø TRAVEL PLAN
  // --------------------------------------------------
  const deleted = deleteTravelPlan(planId);
  
  if (!deleted) {
    console.error('‚ùå Failed to delete travel plan');
    return;
  }

  console.debug(`‚úì Deleted plan: ${planId}`);

  thinkTime(1, 1.5);

  // --------------------------------------------------
  // 8. –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–î–ê–õ–ï–ù–ù–Ø
  // --------------------------------------------------
  const isDeleted = verifyPlanDeleted(planId);
  
  if (!isDeleted) {
    console.error(`‚ùå Plan ${planId} was not properly deleted`);
  }

  sleep(1);
}

// ============================================================================
// SETUP & TEARDOWN
// ============================================================================

export function setup() {
  console.log('='.repeat(80));
  console.log('üî• SMOKE TEST - Basic Functionality Check');
  console.log('='.repeat(80));
  console.log('Target: 5 concurrent users (minimal load)');
  console.log('Duration: 2 minutes');
  console.log('Purpose: Verify API is functional before heavy load testing');
  console.log('');
  console.log('Testing:');
  console.log('  ‚úì Health check');
  console.log('  ‚úì List travel plans');
  console.log('  ‚úì Create travel plan');
  console.log('  ‚úì Read travel plan');
  console.log('  ‚úì Add location');
  console.log('  ‚úì Update travel plan');
  console.log('  ‚úì Delete travel plan');
  console.log('='.repeat(80));
  console.log('');
}

export function teardown(data) {
  console.log('');
  console.log('='.repeat(80));
  console.log('üî• SMOKE TEST COMPLETED');
  console.log('='.repeat(80));
  console.log('');
  console.log('Next steps:');
  console.log('  ‚úì If all checks passed ‚Üí proceed with load testing');
  console.log('  ‚úó If checks failed ‚Üí fix issues before load testing');
  console.log('='.repeat(80));
}
